#!/bin/bash

set -eo pipefail

# Helper functions

root_help() {
  echo ""
  echo "Usage: ghelper [subcommand] [options]"
  echo ""
  echo "Subcommand:"
  echo ""
  echo "commit: Create a new branch, add/delete files, and open/merge a pull request."
  echo "exec:   Execute a shell command and log the output."
  echo ""
  echo "-h, --help: Show this help message."
  exit 0
}

print_versions() {
  printf "%sgit version%s: $(git --version)\n" "$underline" "$normal"
  # shellcheck disable=SC2005,SC2046
  printf "%sGitHub CLI version%s: " "$underline" "$normal" && echo $(gh --version) # done this way to remove newline
}

checkout_main_branch() {
  local gh_branch_name="$1"

  printf "   > Determining main branch:\n"
  if [[ -n "$gh_branch_name" ]]; then
    printf "      > Using main branch %s%s%s, set by user.\n" "$blue" "$gh_branch_name" "$normal"
    local main_branch_for_repo="$gh_branch_name"
  else
    for main_branch in main master trunk develop; do
      printf "      > Checking if %s%s%s exists in remote.\n" "$blue" "$main_branch" "$normal"
      local main_branch_grep_mathc
      main_branch_grep_mathc=$(git branch -r | { grep "origin/$main_branch" || true; })
      if [[ -n "$main_branch_grep_mathc" ]]; then
          printf "      > Found branch %s%s%s.\n" "$blue" "$main_branch" "$normal"
          local main_branch_for_repo="$main_branch"
      else
        printf "      > Branch %s%s%s not found in remote, continuing.\n" "$blue" "$main_branch" "$normal"
      fi
    done

    if [[ -z "$main_branch_for_repo" ]]; then
      printf "   > %sNo main branch found, exiting.%s" "$red" "$normal"
      exit 1
    fi
  fi

  printf "   > Going with branch %s%s%s.\n" "$blue" "$main_branch_for_repo" "$normal"
  git checkout "$main_branch_for_repo" -q
}

clone_repository() {
  local git_repo="$1"
  local git_repo_dir="$2"

  set +e
  printf "   > Cloning repository %s%s%s to %s%s%s.\n" "$blue" "$git_repo" "$normal" "$blue" "$git_repo_dir" "$normal"
  local gh_clone_error_log
  gh_clone_error_log="$(mktemp)"
  if ! gh repo clone "$git_repo" "$git_repo_dir" 2> "$gh_clone_error_log"; then
    printf "   > %sPush failed:\n\n" "$red"
    cat "$gh_clone_error_log"
    printf "%s" "$normal"
    exit 1
  fi
  set -e

  cd "$git_repo_dir"
}


# Subcommands

subc_commit() {
  local subcommand='commit'
  local positional_args=()

  while [[ $# -gt 0 ]]; do
    case $1 in
      -a|--add)
        local add_files="$2"
        shift # past argument
        shift # past value
        ;;
      -d|--delete)
        local del_files="$2"
        shift # past argument
        shift # past value
        ;;
      -b|--new-branch-name)
        local gh_new_branch_name="$2"
        shift # past argument
        shift # past value
        ;;
      -m|--commit-message)
        local commit_message="$2"
        shift # past argument
        shift # past value
        ;;
      -c|--continue-on-missing-file)
        local continue_on_missing_file=1
        shift # past argument
        ;;
      -w|--working-dir)
        local custom_working_dir="$2"
        shift # past argument
        shift # past value
        ;;
      -B|--base-branch-name)
        local gh_base_branch_name="$2"
        shift # past argument
        shift # past value
        ;;
      -P|--no-push)
        local gh_no_push=1
        shift # past argument
        ;;
      -O|--no-pull-request)
        local gh_no_pr=1
        shift # past argument
        ;;
      -M|--merge)
        local gh_merge=1
        shift # past argument
        ;;
      -S|--squash)
        local gh_squash=1
        shift # past argument
        ;;
      -R|--rebase)
        local gh_rebase=1
        shift # past argument
        ;;
      -C|--no-clean)
        local no_clean=1
        shift # past argument
        ;;
      --debug)
        local debug=1
        shift # past argument
        ;;
      -h|--help)
        local show_help=1
        shift # past argument
        ;;
      --*|-*)
        echo "$subcommand: Unknown option $1."
        exit 1
        ;;
      *)
        positional_args+=("$1") # save positional arg
        shift # past argument
        ;;
    esac
  done

  set -- "${positional_args[@]}" # restore positional parameters

  if [[ -n "$show_help" ]]; then
    echo ""
    echo "Usage: ghelper $subcommand <list of git repositories>"
    echo ""
    echo "Options:"
    echo ""
    echo "  -a, --add <src1=dest1,src2=dest2,src3=dest3,...>   Files to add. Source files are assumed to be in the same directory as the script is run from."
    echo "  -d, --delete <file1,file2,...>                     Files to delete."
    echo "  -b, --new-branch-name <name>                       Name of the branch to create."
    echo "  -m, --commit-message <message>                     Commit message."
    echo "  -c, --continue-on-missing-file                     Continue even if a file to delete is missing."
    echo "  -w, --working-dir <path>                           Custom working directory. Implies --no-clean."
    echo "  -B, --base-branch-name <name>                      Name of the base branch to create the new branch from. If not provided, the script will try to find a main branch (main, master, trunk, develop) in the repository."
    echo "  -P, --no-push                                      Do not push to origin."
    echo "  -O, --no-pull-request                              Do not open a pull request."
    echo "  -M, --merge                                        Automatically merge pull requests. Uses merge commit by default, can be combined with --squash or --rebase."
    echo "  -S, --squash                                       Squash commits when merging pull requests."
    echo "  -R, --rebase                                       Rebase commits when merging pull requests."
    echo "  -C, --no-clean                                     Do not clean up working directory."
    echo "  -h, --help                                         Show this help message."
    echo "  --debug                                            Enable debug mode."
    echo ""
    echo "Examples:"
    echo ""
    echo "1. Create a new branch and add a file to it:"
    echo "   ghelper $subcommand --add renovate.json=.github/renovate.json --new-branch-name ci/add-renovate 3lvia/cool-system"
    echo ""
    echo "2. Create a new branch, add multiple files to it, and delete another file:"
    echo "   ghelper $subcommand --add yarn.lock=frontend/yarn.lock,package.json=frontend/package.json --delete frontend/package-lock.json --new-branch-name build/use-yarn 3lvia/cool-system"
    echo ""
    echo "3. Create a new branch, add a file to it, use a custom commit message and automatically merge using squash:"
    echo "   ghelper $subcommand --add .github/workflows/ci.yml --new-branch-name ci/add-ci --commit-message 'Add CI workflow' --merge --squash 3lvia/cool-system"
    echo ""
    echo "4. Create a new branch, add a file to it, and do not push to origin using repository list file:"
    echo "   ghelper $subcommand --add .github/workflows/ci.yml --new-branch-name ci/add-ci --no-push repositories.txt"
    echo ""

    exit 0
  fi


  # Required arguments

  if [[ -n "$1" ]]; then
    local git_repos="$1"
  else
    echo "$subcommand: No list of git repositories provided; got: $1"
    exit 1
  fi

  if [[ -z "$add_files" ]]; then
    echo "$subcommand: No files to add provided; use -a or --add."
    exit 1
  fi

  if [[ -z "$gh_new_branch_name" ]]; then
    echo "$subcommand: No new branch name provided; ues -b or --new-branch-name."
    exit 1
  fi


  # Debug mode

  if [[ -n "$debug" ]]; then
    printf "\n\n"
    printf "%sDebug mode enabled:%s\n" "$blue" "$normal"
    printf "%ssubcommand%s: %s\n" "$underline" "$normal" "$subcommand"
    printf "%sadd_files%s: %s\n" "$underline" "$normal" "$add_files"
    printf "%sdel_files%s: %s\n" "$underline" "$normal" "$del_files"
    printf "%sgh_new_branch_name%s: %s\n" "$underline" "$normal" "$gh_new_branch_name"
    printf "%scommit_message%s: %s\n" "$underline" "$normal" "$commit_message"
    printf "%scontinue_on_missing_file%s: %s\n" "$underline" "$normal" "$continue_on_missing_file"
    printf "%sgh_base_branch_name%s: %s\n" "$underline" "$normal" "$gh_base_branch_name"
    printf "%sgh_no_push%s: %s\n" "$underline" "$normal" "$gh_no_push"
    printf "%sgh_no_pr%s: %s\n" "$underline" "$normal" "$gh_no_pr"
    printf "%sgh_merge%s: %s\n" "$underline" "$normal" "$gh_merge"
    printf "%sgh_squash%s: %s\n" "$underline" "$normal" "$gh_squash"
    printf "%sgh_rebase%s: %s\n" "$underline" "$normal" "$gh_rebase"
    printf "%sno_clean%s: %s\n" "$underline" "$normal" "$no_clean"
    printf "%sgit_repos%s: %s\n" "$underline" "$normal" "$git_repos"
    print_versions
    printf "\n\n"
  fi


  # Determine list of git repositories

  if [ -f "$git_repos" ]; then
    printf "> Reading list of git repositories from file %s%s%s.\n" "$blue" "$git_repos" "$normal"
    local git_repos
    git_repos=$(cat "$git_repos")
  else
    printf "> Reading list of git repositories from argument as comma separated list.\n"
    local git_repos
    git_repos=$(echo "$git_repos" | tr "," "\n")
  fi

  if [[ -z "$git_repos" ]]; then
    echo "> %sNo git repositories found.%s"
    exit 1
  fi


  # Create working directory

  local script_path
  script_path="$(pwd)" # save current dir

  if [[ -n "$custom_working_dir" ]]; then
    local working_dir="$custom_working_dir"

    if [[ ! -d "$working_dir" ]]; then
      printf "> Working-directory %s%s%s does not exist, creating it.\n" "$blue" "$working_dir" "$normal"
      mkdir -p "$working_dir"
    fi

    printf "> Using working-directory %s%s%s.\n" "$blue" "$working_dir" "$normal"
    cd "$working_dir"
  else
    local working_dir
    working_dir="$(mktemp -d)"

    printf "> Creating working-directory in %s%s%s.\n" "$blue" "$working_dir" "$normal"
    cd "$working_dir"
  fi

  # Process each repository in list
  for git_repo in $git_repos; do
    printf "\n\n"
    printf "> Processing repository %s%s%s:\n" "$blue" "$git_repo" "$normal"


    # Clone repository and setup directory

    local git_repo_dir
    git_repo_dir="$working_dir"/$(basename "$git_repo")
    clone_repository "$git_repo" "$git_repo_dir"


    # Checkout main branch

    checkout_main_branch "$gh_base_branch_name"
    gh_main_branch="$(git branch --show-current)"


    # Add files

    printf "   > Proceeding to add files:\n"
    local add_files
    add_files=$(echo "$add_files" | tr "," "\n")
    for add_file in $add_files; do
      local add_file_split
      add_file_split=$(echo "$add_file" | tr "=" "\n")

      local add_src_file
      add_src_file=$(echo "$add_file_split" | head -n1)

      local add_dest_file
      add_dest_file=$(echo "$add_file_split" | tail -n1)

      # If user did not provide a full path, assume it's in the same directory as the script
      local add_src_file_path="$add_src_file"
      if [[ -z "$add_src_file_path" ]]; then
        local add_src_file_path="$script_path/$add_src_file"
      fi

      local add_dest_file_path="$git_repo_dir/$add_dest_file"

      printf "       > Checking if source file %s%s%s exists.\n" "$blue" "$add_src_file" "$normal"
      if [[ ! -f "$add_src_file_path" ]]; then
        printf "       > %sSource file %s%s%s at full path %s%s%s does not exist.%s\n" "$red" "$blue" "$add_src_file" "$red" "$blue" "$add_src_file_path" "$red" "$normal"
        exit 1
      fi

      printf "       > Adding %s%s%s from source file %s%s%s.\n" "$green" "$add_dest_file" "$normal" "$blue" "$add_src_file" "$normal"
      # Make directory if it doesn't exist
      local add_dest_file_path_dir
      add_dest_file_path_dir=$(dirname "$add_dest_file_path")
      mkdir -p "$add_dest_file_path_dir"
      cp "$add_src_file_path" "$add_dest_file_path"
      git add "$add_dest_file_path"
    done


    # Delete files

    if [[ -z "$del_files" ]]; then
      printf "   > No files to delete provided, skipping.\n"
    else
      printf "   > Proceeding to delete files:\n"
      local del_files
      del_files="$(echo "$del_files" | tr "," "\n")"
      for del_file in $del_files; do
        local del_file_path="$git_repo_dir/$del_file"

        printf "       > Checking if file %s%s%s exists.\n" "$blue" "$del_file" "$normal"
        if [[ ! -f "$del_file_path" ]]; then
          if [[ -n "$continue_on_missing_file" ]]; then
            printf "       > %sFile %s%s%s does not exist, continuing.%s\n" "$red" "$blue" "$del_file" "$red" "$normal"
            continue
          else
            printf "       > %sFile %s%s%s does not exist, exiting.%s\n" "$red" "$blue" "$del_file" "$red" "$normal"
            exit 1
          fi
        fi

        printf "       > Deleting %s%s%s.\n" "$red" "$del_file" "$normal"
        rm -f "$del_file_path"
        git add "$del_file_path"
      done
    fi


    # Checkout branch and commit changes

    printf "   > Checking out new branch %s%s%s.\n" "$blue" "$gh_new_branch_name" "$normal"
    git checkout -b "$gh_new_branch_name" -q

    local commit_body="Automatically generated by [ghelper](https://github.com/3lvia/ghelper)."

    if [[ -n "$commit_message" ]]; then
      printf "   > Committing changes, using custom commit message...\n"
      git commit -m "$commit_message" -m "$commit_body" -q
    else
      printf "   > Committing changes, using default commit message...\n"
      git commit -m "Update files" -m "$commit_body" -q
    fi

    printf "   > Changes committed.\n"


    # Push to origin

    if [[ -n "$gh_no_push" ]]; then
      printf "   > Pushing to origin disabled.\n"
      set -e
      continue
    fi


    set +e # disable exit on error for push and pr creation

    printf "   > Pushing to origin...\n"
    local gh_push_error_log
    gh_push_error_log="$(mktemp)"
    if ! git push -qu origin --no-progress "$gh_new_branch_name" 2> "$gh_push_error_log"; then
      printf "   > %sPush failed:\n\n" "$red"
      cat "$gh_push_error_log"
      printf "%s" "$normal"
      exit 1
    fi


    # Create pull request

    if [[ -n "$gh_no_pr" ]]; then
      printf "   > Pull request creation disabled.\n\n"
      set -e
      continue
    fi

    printf "   > Creating pull request...\n"
    local gh_pr_create_error_log
    gh_pr_create_error_log="$(mktemp)"
    if ! gh_pr_create_url=$(gh pr create -B "$gh_main_branch" -a '@me' -f 2> "$gh_pr_create_error_log"); then
     printf "      > %sPull request creation failed:\n\n" "$red"
      cat "$gh_pr_create_error_log"
      printf "%s" "$normal"
      exit 1
    fi

    printf "   > Pull request created.\n"


    # Merge pull request

    if [[ -z "$gh_merge" ]]; then
      printf "   > Merging pull request disabled, see pull request at %s%s%s.\n\n" "$blue" "$gh_pr_create_url" "$normal"
      set -e
      continue
    fi

    local gh_merge_arg='-m'
    if [[ -n "$gh_squash" ]]; then
      printf "   > Pull request will be merged using squash.\n"
      local gh_merge_arg='-s'
    elif [[ -n "$gh_rebase" ]]; then
      printf "   > Pull request will be merged using rebase.\n"
      local gh_merge_arg='-r'
    else
      printf "   > Pull request will be merged using merge commit.\n"
    fi

    printf "   > Merging pull request...\n"
    local gh_pr_merge_error_log
    gh_pr_merge_error_log="$(mktemp)"
    if ! gh pr merge -d --auto "$gh_merge_arg" 2> "$gh_pr_merge_error_log"; then
      printf "   > %sPull request merge failed:\n\n" "$red"
      cat "$gh_pr_merge_error_log"
      printf "%s" "$normal"
      exit 1
    fi
    printf "   > Pull request merged.\n"

    set -e
    printf "\n"
  done


  # Clean up (or not)

  if [[ -n "$no_clean" || -n "$custom_working_dir" ]]; then
    echo "> Done, not cleaning up."
  else
    echo "> Done, cleaning up."
    rm -rf "$working_dir"
  fi
}

subc_exec() {
  local subcommand='exec'
  local positional_args=()

  while [[ $# -gt 0 ]]; do
    case $1 in
      -x|--exec)
        local cmd_execute="$2"
        shift # past argument
        shift # past value
        ;;
      -l|--log-file)
        local cmd_log_file="$2"
        shift # past argument
        shift # past value
        ;;
      -b|--branch)
        local gh_branch_name="$2"
        shift # past argument
        shift # past value
        ;;
      -w|--working-dir)
        local custom_working_dir="$2"
        shift # past argument
        shift # past value
        ;;
      -C|--no-clean)
        local no_clean=1
        shift # past argument
        ;;
      --debug)
        local debug=1
        shift # past argument
        ;;
      -h|--help)
        local show_help=1
        shift # past argument
        ;;
      --*|-*)
        echo "Unknown option $1."
        exit 1
        ;;
      *)
        positional_args+=("$1") # save positional arg
        shift # past argument
        ;;
    esac
  done

  set -- "${positional_args[@]}" # restore positional parameters

  if [[ -n "$show_help" ]]; then
    echo ""
    echo "Usage: ghelper $subcommand [options] <list of git repositories>"
    echo ""
    echo "Options:"
    echo ""
    echo "  -x, --exec <command>        Command to execute."
    echo "  -l, --log-file <file>       Log file to write output to."
    echo "  -b, --branch <name>         Name of the branch to checkout."
    echo "  -w, --working-dir <path>    Custom working directory. Implies --no-clean."
    echo "  -C, --no-clean              Do not clean up working directory."
    echo "  -h, --help                  Show this help message."
    echo "  --debug                     Enable debug mode."
    echo ""
    echo "Examples:"
    echo ""
    echo "1. Check if the file 'README.md' exists in the main branch of the repository '3lvia/ghelper':"
    echo "   ghelper $subcommand -x 'ls README.md' 3lvia/ghelper"
    echo ""
    echo "2. Run a Trivy scan on the repositories '3lvia/core-terraform' and '3lvia/runtimeservice-terraform':"
    echo "   ghelper $subcommand -x 'trivy --severity HIGH .' 3lvia/core-terraform,3lvia/runtimeservice-terraform"
    echo ""
    echo "3. Run a custom shell script on the repositories listed in 'repositories.txt', and don't clean up the working directory:"
    echo "   ghelper $subcommand -x 'sh ./my-script.sh' -w /home/user/my-working-dir repositories.txt"

    exit 0
  fi


  # Required arguments

  if [[ -n "$1" ]]; then
    local git_repos="$1"
  else
    echo "$subcommand: No list of git repositories provided; got: $1"
    exit 1
  fi


  # Debug mode

  if [[ -n "$debug" ]]; then
    printf "\n\n"
    printf "%sDebug mode enabled:%s\n" "$blue" "$normal"
    printf "%ssubcommand%s: %s\n" "$underline" "$normal" "$subcommand"
    printf "%scmd_execute%s: %s\n" "$underline" "$normal" "$cmd_execute"
    printf "%scmd_log_file%s: %s\n" "$underline" "$normal" "$cmd_log_file"
    printf "%sgh_branch_name%s: %s\n" "$underline" "$normal" "$gh_branch_name"
    printf "%sno_clean%s: %s\n" "$underline" "$normal" "$no_clean"
    printf "%sgit_repos%s: %s\n" "$underline" "$normal" "$git_repos"
    print_versions
    printf "\n\n"
  fi


  # Determine list of git repositories

  if [ -f "$git_repos" ]; then
    printf "> Reading list of git repositories from file %s%s%s.\n" "$blue" "$git_repos" "$normal"
    local git_repos
    git_repos=$(cat "$git_repos")
  else
    printf "> Reading list of git repositories from argument as comma separated list.\n"
    local git_repos
    git_repos=$(echo "$git_repos" | tr "," "\n")
  fi

  if [[ -z "$git_repos" ]]; then
    echo "> %sNo git repositories found.%s"
    exit 1
  fi


  # Create working directory

  if [[ -n "$custom_working_dir" ]]; then
    local working_dir="$custom_working_dir"

    if [[ ! -d "$working_dir" ]]; then
      printf "> Working-directory %s%s%s does not exist, creating it.\n" "$blue" "$working_dir" "$normal"
      mkdir -p "$working_dir"
    fi

    printf "> Using working-directory %s%s%s.\n" "$blue" "$working_dir" "$normal"
    cd "$working_dir"
  else
    local working_dir
    working_dir="$(mktemp -d)"

    printf "> Creating working-directory in %s%s%s.\n" "$blue" "$working_dir" "$normal"
    cd "$working_dir"
  fi


  # Process each repository in list

  printf "\n"
  for git_repo in $git_repos; do
    printf "> Processing repository %s%s%s:\n" "$blue" "$git_repo" "$normal"


    # Clone repository and setup directory

    local git_repo_dir
    git_repo_dir="$working_dir"/$(basename "$git_repo")
    clone_repository "$git_repo" "$git_repo_dir"


    # Checkout main branch

    checkout_main_branch "$gh_branch_name"


    # Execute command

    printf "   > Executing command %s'%s'%s.\n" "$blue" "$cmd_execute" "$normal"
    if [[ -n "$cmd_log_file" ]]; then
      printf "   > Appending output to %s%s%s.\n" "$blue" "$cmd_log_file" "$normal"
      echo "Repository: $git_repo" >> "$cmd_log_file"
      $cmd_execute >> "$cmd_log_file" 2>&1
    else
      $cmd_execute
    fi

    printf "\n"
  done


  # Clean up (or not)

  if [[ -n "$no_clean" || -n "$custom_working_dir" ]]; then
    echo "> Done, not cleaning up."
  else
    echo "> Done, cleaning up."
    rm -rf "$working_dir"
  fi
}

main() {
  # Check if required software is installed

  if ! command -v git &> /dev/null; then
    echo "git could not be found."
    exit 1
  fi

  if ! command -v gh &> /dev/null; then
    echo "GitHub CLI (gh) could not be found."
    exit 1
  fi

  if ! command -v tput &> /dev/null; then
    echo "tput could not be found."
    exit 1
  fi


  # Set colors

  red="$(TERM=xterm tput setaf 1)"
  green="$(TERM=xterm tput setaf 2)"
  blue="$(TERM=xterm tput setaf 4)"
  normal="$(TERM=xterm tput sgr0)"
  underline="$(TERM=xterm tput smul)"


  case $1 in
    commit)
      subc_commit "${@:2}"
      ;;
    exec)
      subc_exec "${@:2}"
      ;;
    *)
      root_help
      ;;
  esac
}

main "$@"
